'use strict';

var _Promise = require('babel-runtime/core-js/promise').default;

var _regeneratorRuntime = require('babel-runtime/regenerator').default;

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default').default;

exports.__esModule = true;
exports.execFile = execFile;
exports.exec = exec;
exports.execWinShellUtf8 = execWinShellUtf8;

var _child_process = require('child_process');

var _child_process2 = _interopRequireDefault(_child_process);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _del = require('del');

var _del2 = _interopRequireDefault(_del);

var _osFamily = require('os-family');

var _osFamily2 = _interopRequireDefault(_osFamily);

var _nanoid = require('nanoid');

var _nanoid2 = _interopRequireDefault(_nanoid);

var _promisify = require('./promisify');

var _promisify2 = _interopRequireDefault(_promisify);

var _binaries = require('../binaries');

var _binaries2 = _interopRequireDefault(_binaries);

var EXIT_CODE_REGEXP = /Exit code: (-?\d+)/;

var OPEN_PATH = '/usr/bin/open';
var TEMP_FIFO_NAME = function (seed) {
    return 'testcafe-browser-tools-fifo-' + seed;
};

function getTempFIFOName() {
    return _path2.default.join(_os2.default.tmpdir(), TEMP_FIFO_NAME(_nanoid2.default()));
}

var execFilePromise = _promisify2.default(_child_process2.default.execFile);
var execPromise = _promisify2.default(_child_process2.default.exec);

function readFIFO(fifoPath) {
    return new _Promise(function (resolve, reject) {
        var data = '';
        var stream = _fs2.default.createReadStream(fifoPath);

        stream.on('data', function (newData) {
            return data += newData ? newData.toString() : '';
        });
        stream.on('end', function () {
            return resolve(data);
        });
        stream.on('error', reject);
    });
}

function spawnApp(args) {
    return new _Promise(function (resolve, reject) {
        var child = _child_process2.default.spawn(OPEN_PATH, ['-n', '-a', _binaries2.default.app, '--args', ...args]);

        var outputData = '';

        child.on('error', reject);

        child.on('exit', function (code) {
            if (code) reject(new Error('Exit code: ' + code + '\n' + outputData + '\n'));else resolve();
        });

        child.stdout.on('data', function (data) {
            return outputData += String(data);
        });
        child.stderr.on('data', function (data) {
            return outputData += String(data);
        });
    });
}

function runWithMacApp(filePath, args) {
    var fifoName, _ref, data, exitCodeMatch, exitCode, error;

    return _regeneratorRuntime.async(function runWithMacApp$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
            case 0:
                fifoName = getTempFIFOName();
                context$1$0.next = 3;
                return _regeneratorRuntime.awrap(execPromise('mkfifo ' + fifoName));

            case 3:
                context$1$0.prev = 3;
                context$1$0.next = 6;
                return _regeneratorRuntime.awrap(_Promise.all([readFIFO(fifoName), spawnApp([fifoName, filePath, ...args])]));

            case 6:
                _ref = context$1$0.sent;
                data = _ref[0];
                exitCodeMatch = data.match(EXIT_CODE_REGEXP);

                if (exitCodeMatch) {
                    context$1$0.next = 11;
                    break;
                }

                return context$1$0.abrupt('return', data);

            case 11:
                exitCode = Number(exitCodeMatch[1]);

                if (!exitCode) {
                    context$1$0.next = 16;
                    break;
                }

                error = new Error('Exit code: ' + exitCode);

                error.code = exitCode;

                throw error;

            case 16:
                return context$1$0.abrupt('return', data);

            case 17:
                context$1$0.prev = 17;
                context$1$0.next = 20;
                return _regeneratorRuntime.awrap(_del2.default(fifoName, { force: true }));

            case 20:
                return context$1$0.finish(17);

            case 21:
            case 'end':
                return context$1$0.stop();
        }
    }, null, this, [[3,, 17, 21]]);
}

//API

function execFile(filePath, args) {
    return _regeneratorRuntime.async(function execFile$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
            case 0:
                if (!_osFamily2.default.mac) {
                    context$1$0.next = 4;
                    break;
                }

                context$1$0.next = 3;
                return _regeneratorRuntime.awrap(runWithMacApp(filePath, args));

            case 3:
                return context$1$0.abrupt('return', context$1$0.sent);

            case 4:
                context$1$0.next = 6;
                return _regeneratorRuntime.awrap(execFilePromise(filePath, args));

            case 6:
                return context$1$0.abrupt('return', context$1$0.sent);

            case 7:
            case 'end':
                return context$1$0.stop();
        }
    }, null, this);
}

function exec(command) {
    return _regeneratorRuntime.async(function exec$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
            case 0:
                return context$1$0.abrupt('return', execPromise(command, { env: process.env }));

            case 1:
            case 'end':
                return context$1$0.stop();
        }
    }, null, this);
}

function execWinShellUtf8(command) {
    var setCodePageCmd, restoreCodePageCmd;
    return _regeneratorRuntime.async(function execWinShellUtf8$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
            case 0:
                setCodePageCmd = 'FOR /F  "tokens=2 delims=:,." %i in (\'chcp\') do (chcp 65001';
                restoreCodePageCmd = 'chcp %i)';
                context$1$0.next = 4;
                return _regeneratorRuntime.awrap(exec(setCodePageCmd + ' & ' + command + ' & ' + restoreCodePageCmd));

            case 4:
                return context$1$0.abrupt('return', context$1$0.sent);

            case 5:
            case 'end':
                return context$1$0.stop();
        }
    }, null, this);
}

// NOTE: To avoid terminal errors, we need to restore the original code page after the command is executed.