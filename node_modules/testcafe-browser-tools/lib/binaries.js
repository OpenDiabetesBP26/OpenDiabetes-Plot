'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default').default;

exports.__esModule = true;

var _path = require('path');

var _osFamily = require('os-family');

var _osFamily2 = _interopRequireDefault(_osFamily);

var _readFileRelative = require('read-file-relative');

var _linuxPlatformInfo = require('linux-platform-info');

var MAC_APP_NAME = 'TestCafe Browser Tools.app';
var MAC_BINARY_PATH = function (binary) {
    return _path.join(__dirname, '../bin/mac/' + MAC_APP_NAME + '/Contents/MacOS/' + binary);
};

var BINARIES = void 0;

if (_osFamily2.default.win) {
    BINARIES = {
        findWindow: _readFileRelative.toAbsPath('../bin/win/find-window.exe'),
        getWindowSize: _readFileRelative.toAbsPath('../bin/win/get-window-size.exe'),
        close: _readFileRelative.toAbsPath('../bin/win/close.exe'),
        screenshot: _readFileRelative.toAbsPath('../bin/win/screenshot.exe'),
        generateThumbnail: _readFileRelative.toAbsPath('../bin/win/generate-thumbnail.exe'),
        resize: _readFileRelative.toAbsPath('../bin/win/resize.exe'),
        maximize: _readFileRelative.toAbsPath('../bin/win/maximize.exe'),
        bringToFront: _readFileRelative.toAbsPath('../bin/win/bring-to-front.exe')
    };
} else if (_osFamily2.default.mac) {
    BINARIES = {
        app: MAC_BINARY_PATH('testcafe-browser-tools'),
        open: 'open',
        findWindow: 'find-window',
        getWindowSize: 'get-window-size',
        getWindowBounds: 'get-window-bounds',
        getWindowMaxBounds: 'get-window-max-bounds',
        setWindowBounds: 'set-window-bounds',
        close: 'close',
        screenshot: 'screenshot',
        resize: 'resize',
        generateThumbnail: 'generate-thumbnail',
        bringToFront: 'bring-to-front'
    };
} else if (_osFamily2.default.linux) {
    BINARIES = {
        findWindow: _readFileRelative.toAbsPath('../bin/linux/' + _linuxPlatformInfo.platform + '/find-window'),
        close: _readFileRelative.toAbsPath('../bin/linux/' + _linuxPlatformInfo.platform + '/close'),
        getWindowSize: _readFileRelative.toAbsPath('../bin/linux/' + _linuxPlatformInfo.platform + '/get-window-size'),
        resize: _readFileRelative.toAbsPath('../bin/linux/' + _linuxPlatformInfo.platform + '/resize'),
        maximize: _readFileRelative.toAbsPath('../bin/linux/' + _linuxPlatformInfo.platform + '/maximize'),
        screenshot: _readFileRelative.toAbsPath('../bin/linux/' + _linuxPlatformInfo.platform + '/screenshot'),
        generateThumbnail: _readFileRelative.toAbsPath('../bin/linux/' + _linuxPlatformInfo.platform + '/generate-thumbnail'),
        bringToFront: _readFileRelative.toAbsPath('../bin/linux/' + _linuxPlatformInfo.platform + '/bring-to-front')
    };
} else BINARIES = {};

exports.default = BINARIES;
module.exports = exports.default;