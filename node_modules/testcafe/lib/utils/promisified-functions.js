"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = __importDefault(require("child_process"));
const graceful_fs_1 = __importDefault(require("graceful-fs"));
const pngjs_1 = require("pngjs");
const promisify_event_1 = __importDefault(require("promisify-event"));
const util_1 = require("util");
const make_dir_1 = __importDefault(require("make-dir"));
const path_1 = require("path");
exports.readDir = util_1.promisify(graceful_fs_1.default.readdir);
exports.stat = util_1.promisify(graceful_fs_1.default.stat);
exports.writeFile = util_1.promisify(graceful_fs_1.default.writeFile);
exports.readFile = util_1.promisify(graceful_fs_1.default.readFile);
exports.deleteFile = util_1.promisify(graceful_fs_1.default.unlink);
exports.exec = util_1.promisify(child_process_1.default.exec);
exports.sendMessageToChildProcess = util_1.promisify((process, ...args) => process.send(...args));
function readPng(buffer) {
    const png = new pngjs_1.PNG();
    const parsedPromise = Promise.race([
        promisify_event_1.default(png, 'parsed'),
        promisify_event_1.default(png, 'error')
    ]);
    png.parse(buffer);
    return parsedPromise
        .then(() => png);
}
exports.readPng = readPng;
async function readPngFile(filePath) {
    const buffer = await exports.readFile(filePath);
    return await readPng(buffer);
}
exports.readPngFile = readPngFile;
async function writePng(filePath, png) {
    await ensureDir(filePath);
    const outStream = graceful_fs_1.default.createWriteStream(filePath);
    const pngStream = png.pack();
    const finishPromise = Promise.race([
        promisify_event_1.default(outStream, 'finish'),
        promisify_event_1.default(outStream, 'error'),
        promisify_event_1.default(pngStream, 'error')
    ]);
    pngStream.pipe(outStream);
    return finishPromise;
}
exports.writePng = writePng;
async function ensureDir(filePath) {
    const dirName = path_1.dirname(filePath);
    try {
        await exports.stat(dirName);
    }
    catch (err) {
        await make_dir_1.default(dirName);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvbWlzaWZpZWQtZnVuY3Rpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWxzL3Byb21pc2lmaWVkLWZ1bmN0aW9ucy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLGtFQUF5QztBQUN6Qyw4REFBNkI7QUFDN0IsaUNBQTRCO0FBQzVCLHNFQUE2QztBQUM3QywrQkFBaUM7QUFDakMsd0RBQStCO0FBQy9CLCtCQUErQjtBQUVsQixRQUFBLE9BQU8sR0FBTSxnQkFBUyxDQUFDLHFCQUFFLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDbkMsUUFBQSxJQUFJLEdBQVMsZ0JBQVMsQ0FBQyxxQkFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2hDLFFBQUEsU0FBUyxHQUFJLGdCQUFTLENBQUMscUJBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNyQyxRQUFBLFFBQVEsR0FBSyxnQkFBUyxDQUFDLHFCQUFFLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDcEMsUUFBQSxVQUFVLEdBQUcsZ0JBQVMsQ0FBQyxxQkFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBRWxDLFFBQUEsSUFBSSxHQUFHLGdCQUFTLENBQUMsdUJBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUVwQyxRQUFBLHlCQUF5QixHQUFHLGdCQUFTLENBQUMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxJQUFJLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBRWhHLFNBQWdCLE9BQU8sQ0FBRSxNQUFNO0lBQzNCLE1BQU0sR0FBRyxHQUFHLElBQUksV0FBRyxFQUFFLENBQUM7SUFFdEIsTUFBTSxhQUFhLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztRQUMvQix5QkFBYyxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUM7UUFDN0IseUJBQWMsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDO0tBQy9CLENBQUMsQ0FBQztJQUVILEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFbEIsT0FBTyxhQUFhO1NBQ2YsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3pCLENBQUM7QUFaRCwwQkFZQztBQUVNLEtBQUssVUFBVSxXQUFXLENBQUUsUUFBUTtJQUN2QyxNQUFNLE1BQU0sR0FBRyxNQUFNLGdCQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7SUFFeEMsT0FBTyxNQUFNLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNqQyxDQUFDO0FBSkQsa0NBSUM7QUFFTSxLQUFLLFVBQVUsUUFBUSxDQUFFLFFBQVEsRUFBRSxHQUFHO0lBQ3pDLE1BQU0sU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBRTFCLE1BQU0sU0FBUyxHQUFHLHFCQUFFLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDakQsTUFBTSxTQUFTLEdBQUcsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO0lBRTdCLE1BQU0sYUFBYSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUM7UUFDL0IseUJBQWMsQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDO1FBQ25DLHlCQUFjLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQztRQUNsQyx5QkFBYyxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUM7S0FDckMsQ0FBQyxDQUFDO0lBRUgsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUUxQixPQUFPLGFBQWEsQ0FBQztBQUN6QixDQUFDO0FBZkQsNEJBZUM7QUFFRCxLQUFLLFVBQVUsU0FBUyxDQUFFLFFBQVE7SUFDOUIsTUFBTSxPQUFPLEdBQUcsY0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBRWxDLElBQUk7UUFDQSxNQUFNLFlBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUN2QjtJQUNELE9BQU8sR0FBRyxFQUFFO1FBQ1IsTUFBTSxrQkFBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQzFCO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjaGlsZFByb2Nlc3MgZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XG5pbXBvcnQgZnMgZnJvbSAnZ3JhY2VmdWwtZnMnO1xuaW1wb3J0IHsgUE5HIH0gZnJvbSAncG5nanMnO1xuaW1wb3J0IHByb21pc2lmeUV2ZW50IGZyb20gJ3Byb21pc2lmeS1ldmVudCc7XG5pbXBvcnQgeyBwcm9taXNpZnkgfSBmcm9tICd1dGlsJztcbmltcG9ydCBtYWtlRGlyIGZyb20gJ21ha2UtZGlyJztcbmltcG9ydCB7IGRpcm5hbWUgfSBmcm9tICdwYXRoJztcblxuZXhwb3J0IGNvbnN0IHJlYWREaXIgICAgPSBwcm9taXNpZnkoZnMucmVhZGRpcik7XG5leHBvcnQgY29uc3Qgc3RhdCAgICAgICA9IHByb21pc2lmeShmcy5zdGF0KTtcbmV4cG9ydCBjb25zdCB3cml0ZUZpbGUgID0gcHJvbWlzaWZ5KGZzLndyaXRlRmlsZSk7XG5leHBvcnQgY29uc3QgcmVhZEZpbGUgICA9IHByb21pc2lmeShmcy5yZWFkRmlsZSk7XG5leHBvcnQgY29uc3QgZGVsZXRlRmlsZSA9IHByb21pc2lmeShmcy51bmxpbmspO1xuXG5leHBvcnQgY29uc3QgZXhlYyA9IHByb21pc2lmeShjaGlsZFByb2Nlc3MuZXhlYyk7XG5cbmV4cG9ydCBjb25zdCBzZW5kTWVzc2FnZVRvQ2hpbGRQcm9jZXNzID0gcHJvbWlzaWZ5KChwcm9jZXNzLCAuLi5hcmdzKSA9PiBwcm9jZXNzLnNlbmQoLi4uYXJncykpO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVhZFBuZyAoYnVmZmVyKSB7XG4gICAgY29uc3QgcG5nID0gbmV3IFBORygpO1xuXG4gICAgY29uc3QgcGFyc2VkUHJvbWlzZSA9IFByb21pc2UucmFjZShbXG4gICAgICAgIHByb21pc2lmeUV2ZW50KHBuZywgJ3BhcnNlZCcpLFxuICAgICAgICBwcm9taXNpZnlFdmVudChwbmcsICdlcnJvcicpXG4gICAgXSk7XG5cbiAgICBwbmcucGFyc2UoYnVmZmVyKTtcblxuICAgIHJldHVybiBwYXJzZWRQcm9taXNlXG4gICAgICAgIC50aGVuKCgpID0+IHBuZyk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZWFkUG5nRmlsZSAoZmlsZVBhdGgpIHtcbiAgICBjb25zdCBidWZmZXIgPSBhd2FpdCByZWFkRmlsZShmaWxlUGF0aCk7XG5cbiAgICByZXR1cm4gYXdhaXQgcmVhZFBuZyhidWZmZXIpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gd3JpdGVQbmcgKGZpbGVQYXRoLCBwbmcpIHtcbiAgICBhd2FpdCBlbnN1cmVEaXIoZmlsZVBhdGgpO1xuXG4gICAgY29uc3Qgb3V0U3RyZWFtID0gZnMuY3JlYXRlV3JpdGVTdHJlYW0oZmlsZVBhdGgpO1xuICAgIGNvbnN0IHBuZ1N0cmVhbSA9IHBuZy5wYWNrKCk7XG5cbiAgICBjb25zdCBmaW5pc2hQcm9taXNlID0gUHJvbWlzZS5yYWNlKFtcbiAgICAgICAgcHJvbWlzaWZ5RXZlbnQob3V0U3RyZWFtLCAnZmluaXNoJyksXG4gICAgICAgIHByb21pc2lmeUV2ZW50KG91dFN0cmVhbSwgJ2Vycm9yJyksXG4gICAgICAgIHByb21pc2lmeUV2ZW50KHBuZ1N0cmVhbSwgJ2Vycm9yJylcbiAgICBdKTtcblxuICAgIHBuZ1N0cmVhbS5waXBlKG91dFN0cmVhbSk7XG5cbiAgICByZXR1cm4gZmluaXNoUHJvbWlzZTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZW5zdXJlRGlyIChmaWxlUGF0aCkge1xuICAgIGNvbnN0IGRpck5hbWUgPSBkaXJuYW1lKGZpbGVQYXRoKTtcblxuICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IHN0YXQoZGlyTmFtZSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgYXdhaXQgbWFrZURpcihkaXJOYW1lKTtcbiAgICB9XG59XG4iXX0=