"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const testcafe_browser_tools_1 = require("testcafe-browser-tools");
const marker_symbol_1 = __importDefault(require("../../../role/marker-symbol"));
const factories_1 = require("./factories");
const test_run_1 = require("../../../errors/test-run");
const test_page_url_1 = require("../../../api/test-page-url");
const check_file_path_1 = __importDefault(require("../../../utils/check-file-path"));
// Validators
exports.integerArgument = factories_1.createIntegerValidator(test_run_1.ActionIntegerArgumentError);
exports.positiveIntegerArgument = factories_1.createPositiveIntegerValidator(test_run_1.ActionPositiveIntegerArgumentError);
exports.booleanArgument = factories_1.createBooleanValidator(test_run_1.ActionBooleanArgumentError);
exports.setSpeedArgument = factories_1.createSpeedValidator(test_run_1.SetTestSpeedArgumentError);
function actionRoleArgument(name, val) {
    if (!val || !val[marker_symbol_1.default])
        throw new test_run_1.ActionRoleArgumentError(name, typeof val);
}
exports.actionRoleArgument = actionRoleArgument;
function actionOptions(name, val) {
    const type = typeof val;
    if (type !== 'object' && val !== null && val !== void 0)
        throw new test_run_1.ActionOptionsTypeError(type);
}
exports.actionOptions = actionOptions;
function stringArgument(argument, val, createError) {
    if (!createError)
        createError = actualValue => new test_run_1.ActionStringArgumentError(argument, actualValue);
    const type = typeof val;
    if (type !== 'string')
        throw createError(type);
}
exports.stringArgument = stringArgument;
function nonEmptyStringArgument(argument, val, createError) {
    if (!createError)
        createError = actualValue => new test_run_1.ActionStringArgumentError(argument, actualValue);
    stringArgument(argument, val, createError);
    if (!val.length)
        throw createError('""');
}
exports.nonEmptyStringArgument = nonEmptyStringArgument;
function nullableStringArgument(argument, val) {
    const type = typeof val;
    if (type !== 'string' && val !== null)
        throw new test_run_1.ActionNullableStringArgumentError(argument, type);
}
exports.nullableStringArgument = nullableStringArgument;
function urlArgument(name, val) {
    nonEmptyStringArgument(name, val);
    test_page_url_1.assertUrl(val.trim(), 'navigateTo');
}
exports.urlArgument = urlArgument;
function stringOrStringArrayArgument(argument, val) {
    const type = typeof val;
    if (type === 'string') {
        if (!val.length)
            throw new test_run_1.ActionStringOrStringArrayArgumentError(argument, '""');
    }
    else if (Array.isArray(val)) {
        if (!val.length)
            throw new test_run_1.ActionStringOrStringArrayArgumentError(argument, '[]');
        const validateElement = elementIndex => nonEmptyStringArgument(argument, val[elementIndex], actualValue => new test_run_1.ActionStringArrayElementError(argument, actualValue, elementIndex));
        for (let i = 0; i < val.length; i++)
            validateElement(i);
    }
    else
        throw new test_run_1.ActionStringOrStringArrayArgumentError(argument, type);
}
exports.stringOrStringArrayArgument = stringOrStringArrayArgument;
function resizeWindowDeviceArgument(name, val) {
    nonEmptyStringArgument(name, val);
    if (!testcafe_browser_tools_1.isValidDeviceName(val))
        throw new test_run_1.ActionUnsupportedDeviceTypeError(name, val);
}
exports.resizeWindowDeviceArgument = resizeWindowDeviceArgument;
function screenshotPathArgument(name, val) {
    nonEmptyStringArgument(name, val);
    const forbiddenCharsList = check_file_path_1.default(val);
    if (forbiddenCharsList.length)
        throw new test_run_1.ForbiddenCharactersInScreenshotPathError(val, forbiddenCharsList);
}
exports.screenshotPathArgument = screenshotPathArgument;
//# sourceMappingURL=data:application/json;base64,