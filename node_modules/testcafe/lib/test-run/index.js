"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const read_file_relative_1 = require("read-file-relative");
const promisify_event_1 = __importDefault(require("promisify-event"));
const mustache_1 = __importDefault(require("mustache"));
const async_event_emitter_1 = __importDefault(require("../utils/async-event-emitter"));
const debug_log_1 = __importDefault(require("./debug-log"));
const formattable_adapter_1 = __importDefault(require("../errors/test-run/formattable-adapter"));
const error_list_1 = __importDefault(require("../errors/error-list"));
const test_run_1 = require("../errors/test-run/");
const phase_1 = __importDefault(require("./phase"));
const client_messages_1 = __importDefault(require("./client-messages"));
const type_1 = __importDefault(require("./commands/type"));
const delay_1 = __importDefault(require("../utils/delay"));
const marker_symbol_1 = __importDefault(require("./marker-symbol"));
const test_run_tracker_1 = __importDefault(require("../api/test-run-tracker"));
const phase_2 = __importDefault(require("../role/phase"));
const plugin_host_1 = __importDefault(require("../reporter/plugin-host"));
const browser_console_messages_1 = __importDefault(require("./browser-console-messages"));
const unstable_network_mode_1 = require("../browser/connection/unstable-network-mode");
const warning_log_1 = __importDefault(require("../notifications/warning-log"));
const warning_message_1 = __importDefault(require("../notifications/warning-message"));
const testcafe_hammerhead_1 = require("testcafe-hammerhead");
const actions_1 = require("./commands/actions");
const INJECTABLES = __importStar(require("../assets/injectables"));
const utils_1 = require("../custom-client-scripts/utils");
const get_url_1 = __importDefault(require("../custom-client-scripts/get-url"));
const string_1 = require("../utils/string");
const utils_2 = require("./commands/utils");
const types_1 = require("../errors/types");
const lazyRequire = require('import-lazy')(require);
const SessionController = lazyRequire('./session-controller');
const ClientFunctionBuilder = lazyRequire('../client-functions/client-function-builder');
const BrowserManipulationQueue = lazyRequire('./browser-manipulation-queue');
const TestRunBookmark = lazyRequire('./bookmark');
const AssertionExecutor = lazyRequire('../assertions/executor');
const actionCommands = lazyRequire('./commands/actions');
const browserManipulationCommands = lazyRequire('./commands/browser-manipulation');
const serviceCommands = lazyRequire('./commands/service');
const { executeJsExpression, executeAsyncJsExpression } = lazyRequire('./execute-js-expression');
const TEST_RUN_TEMPLATE = read_file_relative_1.readSync('../client/test-run/index.js.mustache');
const IFRAME_TEST_RUN_TEMPLATE = read_file_relative_1.readSync('../client/test-run/iframe.js.mustache');
const TEST_DONE_CONFIRMATION_RESPONSE = 'test-done-confirmation';
const MAX_RESPONSE_DELAY = 3000;
const ALL_DRIVER_TASKS_ADDED_TO_QUEUE_EVENT = 'all-driver-tasks-added-to-queue';
class TestRun extends async_event_emitter_1.default {
    constructor(test, browserConnection, screenshotCapturer, globalWarningLog, opts) {
        super();
        this[marker_symbol_1.default] = true;
        this.warningLog = new warning_log_1.default(globalWarningLog);
        this.opts = opts;
        this.test = test;
        this.browserConnection = browserConnection;
        this.phase = phase_1.default.initial;
        this.driverTaskQueue = [];
        this.testDoneCommandQueued = false;
        this.activeDialogHandler = null;
        this.activeIframeSelector = null;
        this.speed = this.opts.speed;
        this.pageLoadTimeout = this.opts.pageLoadTimeout;
        this.disablePageReloads = test.disablePageReloads || opts.disablePageReloads && test.disablePageReloads !==
            false;
        this.disablePageCaching = test.disablePageCaching || opts.disablePageCaching;
        this.allowMultipleWindows = opts.allowMultipleWindows;
        this.session = SessionController.getSession(this);
        this.consoleMessages = new browser_console_messages_1.default();
        this.pendingRequest = null;
        this.pendingPageError = null;
        this.controller = null;
        this.ctx = Object.create(null);
        this.fixtureCtx = null;
        this.currentRoleId = null;
        this.usedRoleStates = Object.create(null);
        this.errs = [];
        this.lastDriverStatusId = null;
        this.lastDriverStatusResponse = null;
        this.fileDownloadingHandled = false;
        this.resolveWaitForFileDownloadingPromise = null;
        this.addingDriverTasksCount = 0;
        this.debugging = this.opts.debugMode;
        this.debugOnFail = this.opts.debugOnFail;
        this.disableDebugBreakpoints = false;
        this.debugReporterPluginHost = new plugin_host_1.default({ noColors: false });
        this.browserManipulationQueue = new BrowserManipulationQueue(browserConnection, screenshotCapturer, this.warningLog);
        this.debugLog = new debug_log_1.default(this.browserConnection.userAgent);
        this.quarantine = null;
        this.debugLogger = this.opts.debugLogger;
        this._addInjectables();
        this._initRequestHooks();
    }
    _addClientScriptContentWarningsIfNecessary() {
        const { empty, duplicatedContent } = utils_1.findProblematicScripts(this.test.clientScripts);
        if (empty.length)
            this.warningLog.addWarning(warning_message_1.default.clientScriptsWithEmptyContent);
        if (duplicatedContent.length) {
            const suffix = string_1.getPluralSuffix(duplicatedContent);
            const duplicatedContentClientScriptsStr = string_1.getConcatenatedValuesString(duplicatedContent, ',\n ');
            this.warningLog.addWarning(warning_message_1.default.clientScriptsWithDuplicatedContent, suffix, duplicatedContentClientScriptsStr);
        }
    }
    _addInjectables() {
        this._addClientScriptContentWarningsIfNecessary();
        this.injectable.scripts.push(...INJECTABLES.SCRIPTS);
        this.injectable.userScripts.push(...this.test.clientScripts.map(script => {
            return {
                url: get_url_1.default(script),
                page: script.page
            };
        }));
        this.injectable.styles.push(INJECTABLES.TESTCAFE_UI_STYLES);
    }
    get id() {
        return this.session.id;
    }
    get injectable() {
        return this.session.injectable;
    }
    addQuarantineInfo(quarantine) {
        this.quarantine = quarantine;
    }
    addRequestHook(hook) {
        if (this.requestHooks.indexOf(hook) !== -1)
            return;
        this.requestHooks.push(hook);
        this._initRequestHook(hook);
    }
    removeRequestHook(hook) {
        if (this.requestHooks.indexOf(hook) === -1)
            return;
        lodash_1.pull(this.requestHooks, hook);
        this._disposeRequestHook(hook);
    }
    _initRequestHook(hook) {
        hook.warningLog = this.warningLog;
        hook._instantiateRequestFilterRules();
        hook._instantiatedRequestFilterRules.forEach(rule => {
            this.session.addRequestEventListeners(rule, {
                onRequest: hook.onRequest.bind(hook),
                onConfigureResponse: hook._onConfigureResponse.bind(hook),
                onResponse: hook.onResponse.bind(hook)
            }, err => this._onRequestHookMethodError(err, hook));
        });
    }
    _onRequestHookMethodError(event, hook) {
        let err = event.error;
        const isRequestHookNotImplementedMethodError = err instanceof test_run_1.RequestHookNotImplementedMethodError;
        if (!isRequestHookNotImplementedMethodError) {
            const hookClassName = hook.constructor.name;
            err = new test_run_1.RequestHookUnhandledError(err, hookClassName, event.methodName);
        }
        this.addError(err);
    }
    _disposeRequestHook(hook) {
        hook.warningLog = null;
        hook._instantiatedRequestFilterRules.forEach(rule => {
            this.session.removeRequestEventListeners(rule);
        });
    }
    _initRequestHooks() {
        this.requestHooks = Array.from(this.test.requestHooks);
        this.requestHooks.forEach(hook => this._initRequestHook(hook));
    }
    // Hammerhead payload
    _getPayloadScript() {
        this.fileDownloadingHandled = false;
        this.resolveWaitForFileDownloadingPromise = null;
        return mustache_1.default.render(TEST_RUN_TEMPLATE, {
            testRunId: JSON.stringify(this.session.id),
            browserId: JSON.stringify(this.browserConnection.id),
            browserHeartbeatRelativeUrl: JSON.stringify(this.browserConnection.heartbeatRelativeUrl),
            browserStatusRelativeUrl: JSON.stringify(this.browserConnection.statusRelativeUrl),
            browserStatusDoneRelativeUrl: JSON.stringify(this.browserConnection.statusDoneRelativeUrl),
            userAgent: JSON.stringify(this.browserConnection.userAgent),
            testName: JSON.stringify(this.test.name),
            fixtureName: JSON.stringify(this.test.fixture.name),
            selectorTimeout: this.opts.selectorTimeout,
            pageLoadTimeout: this.pageLoadTimeout,
            skipJsErrors: this.opts.skipJsErrors,
            retryTestPages: !!this.opts.retryTestPages,
            speed: this.speed,
            dialogHandler: JSON.stringify(this.activeDialogHandler)
        });
    }
    _getIframePayloadScript() {
        return mustache_1.default.render(IFRAME_TEST_RUN_TEMPLATE, {
            testRunId: JSON.stringify(this.session.id),
            selectorTimeout: this.opts.selectorTimeout,
            pageLoadTimeout: this.pageLoadTimeout,
            retryTestPages: !!this.opts.retryTestPages,
            speed: this.speed,
            dialogHandler: JSON.stringify(this.activeDialogHandler)
        });
    }
    // Hammerhead handlers
    getAuthCredentials() {
        return this.test.authCredentials;
    }
    handleFileDownload() {
        if (this.resolveWaitForFileDownloadingPromise) {
            this.resolveWaitForFileDownloadingPromise(true);
            this.resolveWaitForFileDownloadingPromise = null;
        }
        else
            this.fileDownloadingHandled = true;
    }
    handlePageError(ctx, err) {
        if (ctx.req.headers[unstable_network_mode_1.UNSTABLE_NETWORK_MODE_HEADER]) {
            ctx.closeWithError(500, err.toString());
            return;
        }
        this.pendingPageError = new test_run_1.PageLoadError(err, ctx.reqOpts.url);
        ctx.redirect(ctx.toProxyUrl(testcafe_hammerhead_1.SPECIAL_ERROR_PAGE));
    }
    // Test function execution
    async _executeTestFn(phase, fn) {
        this.phase = phase;
        try {
            await fn(this);
        }
        catch (err) {
            let screenshotPath = null;
            const { screenshots } = this.opts;
            if (screenshots && screenshots.takeOnFails)
                screenshotPath = await this.executeCommand(new browserManipulationCommands.TakeScreenshotOnFailCommand());
            this.addError(err, screenshotPath);
            return false;
        }
        return !this._addPendingPageErrorIfAny();
    }
    async _runBeforeHook() {
        if (this.test.beforeFn)
            return await this._executeTestFn(phase_1.default.inTestBeforeHook, this.test.beforeFn);
        if (this.test.fixture.beforeEachFn)
            return await this._executeTestFn(phase_1.default.inFixtureBeforeEachHook, this.test.fixture.beforeEachFn);
        return true;
    }
    async _runAfterHook() {
        if (this.test.afterFn)
            return await this._executeTestFn(phase_1.default.inTestAfterHook, this.test.afterFn);
        if (this.test.fixture.afterEachFn)
            return await this._executeTestFn(phase_1.default.inFixtureAfterEachHook, this.test.fixture.afterEachFn);
        return true;
    }
    async start() {
        test_run_tracker_1.default.activeTestRuns[this.session.id] = this;
        await this.emit('start');
        const onDisconnected = err => this._disconnect(err);
        this.browserConnection.once('disconnected', onDisconnected);
        await this.once('connected');
        await this.emit('ready');
        if (await this._runBeforeHook()) {
            await this._executeTestFn(phase_1.default.inTest, this.test.fn);
            await this._runAfterHook();
        }
        if (this.disconnected)
            return;
        this.browserConnection.removeListener('disconnected', onDisconnected);
        if (this.errs.length && this.debugOnFail)
            await this._enqueueSetBreakpointCommand(null, this.debugReporterPluginHost.formatError(this.errs[0]));
        await this.emit('before-done');
        await this.executeCommand(new serviceCommands.TestDoneCommand());
        this._addPendingPageErrorIfAny();
        this.session.clearRequestEventListeners();
        this.normalizeRequestHookErrors();
        delete test_run_tracker_1.default.activeTestRuns[this.session.id];
        await this.emit('done');
    }
    // Errors
    _addPendingPageErrorIfAny() {
        if (this.pendingPageError) {
            this.addError(this.pendingPageError);
            this.pendingPageError = null;
            return true;
        }
        return false;
    }
    _createErrorAdapter(err, screenshotPath) {
        return new formattable_adapter_1.default(err, {
            userAgent: this.browserConnection.userAgent,
            screenshotPath: screenshotPath || '',
            testRunPhase: this.phase
        });
    }
    addError(err, screenshotPath) {
        const errList = err instanceof error_list_1.default ? err.items : [err];
        errList.forEach(item => {
            const adapter = this._createErrorAdapter(item, screenshotPath);
            this.errs.push(adapter);
        });
    }
    normalizeRequestHookErrors() {
        const requestHookErrors = lodash_1.remove(this.errs, e => e.code === types_1.TEST_RUN_ERRORS.requestHookNotImplementedError ||
            e.code === types_1.TEST_RUN_ERRORS.requestHookUnhandledError);
        if (!requestHookErrors.length)
            return;
        const uniqRequestHookErrors = lodash_1.chain(requestHookErrors)
            .uniqBy(e => e.hookClassName + e.methodName)
            .sortBy(['hookClassName', 'methodName'])
            .value();
        this.errs = this.errs.concat(uniqRequestHookErrors);
    }
    // Task queue
    _enqueueCommand(command, callsite) {
        if (this.pendingRequest)
            this._resolvePendingRequest(command);
        return new Promise(async (resolve, reject) => {
            this.addingDriverTasksCount--;
            this.driverTaskQueue.push({ command, resolve, reject, callsite });
            if (!this.addingDriverTasksCount)
                await this.emit(ALL_DRIVER_TASKS_ADDED_TO_QUEUE_EVENT, this.driverTaskQueue.length);
        });
    }
    get driverTaskQueueLength() {
        return this.addingDriverTasksCount ? promisify_event_1.default(this, ALL_DRIVER_TASKS_ADDED_TO_QUEUE_EVENT) : Promise.resolve(this.driverTaskQueue.length);
    }
    async _enqueueBrowserConsoleMessagesCommand(command, callsite) {
        await this._enqueueCommand(command, callsite);
        return this.consoleMessages.getCopy();
    }
    async _enqueueSetBreakpointCommand(callsite, error) {
        if (this.browserConnection.isHeadlessBrowser()) {
            this.warningLog.addWarning(warning_message_1.default.debugInHeadlessError);
            return;
        }
        if (this.debugLogger)
            this.debugLogger.showBreakpoint(this.session.id, this.browserConnection.userAgent, callsite, error);
        this.debugging = await this.executeCommand(new serviceCommands.SetBreakpointCommand(!!error), callsite);
    }
    _removeAllNonServiceTasks() {
        this.driverTaskQueue = this.driverTaskQueue.filter(driverTask => utils_2.isServiceCommand(driverTask.command));
        this.browserManipulationQueue.removeAllNonServiceManipulations();
    }
    // Current driver task
    get currentDriverTask() {
        return this.driverTaskQueue[0];
    }
    _resolveCurrentDriverTask(result) {
        this.currentDriverTask.resolve(result);
        this.driverTaskQueue.shift();
        if (this.testDoneCommandQueued)
            this._removeAllNonServiceTasks();
    }
    _rejectCurrentDriverTask(err) {
        err.callsite = err.callsite || this.currentDriverTask.callsite;
        this.currentDriverTask.reject(err);
        this._removeAllNonServiceTasks();
    }
    // Pending request
    _clearPendingRequest() {
        if (this.pendingRequest) {
            clearTimeout(this.pendingRequest.responseTimeout);
            this.pendingRequest = null;
        }
    }
    _resolvePendingRequest(command) {
        this.lastDriverStatusResponse = command;
        this.pendingRequest.resolve(command);
        this._clearPendingRequest();
    }
    // Handle driver request
    _fulfillCurrentDriverTask(driverStatus) {
        if (driverStatus.executionError)
            this._rejectCurrentDriverTask(driverStatus.executionError);
        else
            this._resolveCurrentDriverTask(driverStatus.result);
    }
    _handlePageErrorStatus(pageError) {
        if (this.currentDriverTask && utils_2.isCommandRejectableByPageError(this.currentDriverTask.command)) {
            this._rejectCurrentDriverTask(pageError);
            this.pendingPageError = null;
            return true;
        }
        this.pendingPageError = this.pendingPageError || pageError;
        return false;
    }
    _handleDriverRequest(driverStatus) {
        const isTestDone = this.currentDriverTask && this.currentDriverTask.command.type ===
            type_1.default.testDone;
        const pageError = this.pendingPageError || driverStatus.pageError;
        const currentTaskRejectedByError = pageError && this._handlePageErrorStatus(pageError);
        if (this.disconnected)
            return new Promise((_, reject) => reject());
        this.consoleMessages.concat(driverStatus.consoleMessages);
        if (!currentTaskRejectedByError && driverStatus.isCommandResult) {
            if (isTestDone) {
                this._resolveCurrentDriverTask();
                return TEST_DONE_CONFIRMATION_RESPONSE;
            }
            this._fulfillCurrentDriverTask(driverStatus);
        }
        return this._getCurrentDriverTaskCommand();
    }
    _getCurrentDriverTaskCommand() {
        if (!this.currentDriverTask)
            return null;
        const command = this.currentDriverTask.command;
        if (command.type === type_1.default.navigateTo && command.stateSnapshot)
            this.session.useStateSnapshot(JSON.parse(command.stateSnapshot));
        return command;
    }
    // Execute command
    _executeJsExpression(command) {
        const resultVariableName = command.resultVariableName;
        let expression = command.expression;
        if (resultVariableName)
            expression = `${resultVariableName} = ${expression}, ${resultVariableName}`;
        return executeJsExpression(expression, this, { skipVisibilityCheck: false });
    }
    async _executeAssertion(command, callsite) {
        const assertionTimeout = command.options.timeout ===
            void 0 ? this.opts.assertionTimeout : command.options.timeout;
        const executor = new AssertionExecutor(command, assertionTimeout, callsite);
        executor.once('start-assertion-retries', timeout => this.executeCommand(new serviceCommands.ShowAssertionRetriesStatusCommand(timeout)));
        executor.once('end-assertion-retries', success => this.executeCommand(new serviceCommands.HideAssertionRetriesStatusCommand(success)));
        return executor.run();
    }
    _adjustConfigurationWithCommand(command) {
        if (command.type === type_1.default.testDone) {
            this.testDoneCommandQueued = true;
            if (this.debugLogger)
                this.debugLogger.hideBreakpoint(this.session.id);
        }
        else if (command.type === type_1.default.setNativeDialogHandler)
            this.activeDialogHandler = command.dialogHandler;
        else if (command.type === type_1.default.switchToIframe)
            this.activeIframeSelector = command.selector;
        else if (command.type === type_1.default.switchToMainWindow)
            this.activeIframeSelector = null;
        else if (command.type === type_1.default.setTestSpeed)
            this.speed = command.speed;
        else if (command.type === type_1.default.setPageLoadTimeout)
            this.pageLoadTimeout = command.duration;
        else if (command.type === type_1.default.debug)
            this.debugging = true;
    }
    async _adjustScreenshotCommand(command) {
        const browserId = this.browserConnection.id;
        const { hasChromelessScreenshots } = await this.browserConnection.provider.hasCustomActionForBrowser(browserId);
        if (!hasChromelessScreenshots)
            command.generateScreenshotMark();
    }
    async _setBreakpointIfNecessary(command, callsite) {
        if (!this.disableDebugBreakpoints && this.debugging && utils_2.canSetDebuggerBreakpointBeforeCommand(command))
            await this._enqueueSetBreakpointCommand(callsite);
    }
    async executeCommand(command, callsite) {
        this.debugLog.command(command);
        if (this.pendingPageError && utils_2.isCommandRejectableByPageError(command))
            return this._rejectCommandWithPageError(callsite);
        if (utils_2.isExecutableOnClientCommand(command))
            this.addingDriverTasksCount++;
        this._adjustConfigurationWithCommand(command);
        await this._setBreakpointIfNecessary(command, callsite);
        if (utils_2.isScreenshotCommand(command)) {
            if (this.opts.disableScreenshots) {
                this.warningLog.addWarning(warning_message_1.default.screenshotsDisabled);
                return null;
            }
            await this._adjustScreenshotCommand(command);
        }
        if (utils_2.isBrowserManipulationCommand(command)) {
            this.browserManipulationQueue.push(command);
            if (utils_2.isResizeWindowCommand(command) && this.opts.videoPath)
                this.warningLog.addWarning(warning_message_1.default.videoBrowserResizing, this.test.name);
        }
        if (command.type === type_1.default.wait)
            return delay_1.default(command.timeout);
        if (command.type === type_1.default.setPageLoadTimeout)
            return null;
        if (command.type === type_1.default.debug)
            return await this._enqueueSetBreakpointCommand(callsite);
        if (command.type === type_1.default.useRole)
            return await this._useRole(command.role, callsite);
        if (command.type === type_1.default.assertion)
            return this._executeAssertion(command, callsite);
        if (command.type === type_1.default.executeExpression)
            return await this._executeJsExpression(command, callsite);
        if (command.type === type_1.default.executeAsyncExpression)
            return await executeAsyncJsExpression(command.expression, this, callsite);
        if (command.type === type_1.default.getBrowserConsoleMessages)
            return await this._enqueueBrowserConsoleMessagesCommand(command, callsite);
        return this._enqueueCommand(command, callsite);
    }
    _rejectCommandWithPageError(callsite) {
        const err = this.pendingPageError;
        err.callsite = callsite;
        this.pendingPageError = null;
        return Promise.reject(err);
    }
    // Role management
    async getStateSnapshot() {
        const state = this.session.getStateSnapshot();
        state.storages = await this.executeCommand(new serviceCommands.BackupStoragesCommand());
        return state;
    }
    async switchToCleanRun(url) {
        this.ctx = Object.create(null);
        this.fixtureCtx = Object.create(null);
        this.consoleMessages = new browser_console_messages_1.default();
        this.session.useStateSnapshot(testcafe_hammerhead_1.StateSnapshot.empty());
        if (this.speed !== this.opts.speed) {
            const setSpeedCommand = new actionCommands.SetTestSpeedCommand({ speed: this.opts.speed });
            await this.executeCommand(setSpeedCommand);
        }
        if (this.pageLoadTimeout !== this.opts.pageLoadTimeout) {
            const setPageLoadTimeoutCommand = new actionCommands.SetPageLoadTimeoutCommand({ duration: this.opts.pageLoadTimeout });
            await this.executeCommand(setPageLoadTimeoutCommand);
        }
        await this.navigateToUrl(url, true);
        if (this.activeDialogHandler) {
            const removeDialogHandlerCommand = new actionCommands.SetNativeDialogHandlerCommand({ dialogHandler: { fn: null } });
            await this.executeCommand(removeDialogHandlerCommand);
        }
    }
    async navigateToUrl(url, forceReload, stateSnapshot) {
        const navigateCommand = new actions_1.NavigateToCommand({ url, forceReload, stateSnapshot });
        await this.executeCommand(navigateCommand);
    }
    async _getStateSnapshotFromRole(role) {
        const prevPhase = this.phase;
        this.phase = phase_1.default.inRoleInitializer;
        if (role.phase === phase_2.default.uninitialized)
            await role.initialize(this);
        else if (role.phase === phase_2.default.pendingInitialization)
            await promisify_event_1.default(role, 'initialized');
        if (role.initErr)
            throw role.initErr;
        this.phase = prevPhase;
        return role.stateSnapshot;
    }
    async _useRole(role, callsite) {
        if (this.phase === phase_1.default.inRoleInitializer)
            throw new test_run_1.RoleSwitchInRoleInitializerError(callsite);
        this.disableDebugBreakpoints = true;
        const bookmark = new TestRunBookmark(this, role);
        await bookmark.init();
        if (this.currentRoleId)
            this.usedRoleStates[this.currentRoleId] = await this.getStateSnapshot();
        const stateSnapshot = this.usedRoleStates[role.id] || await this._getStateSnapshotFromRole(role);
        this.session.useStateSnapshot(stateSnapshot);
        this.currentRoleId = role.id;
        await bookmark.restore(callsite, stateSnapshot);
        this.disableDebugBreakpoints = false;
    }
    // Get current URL
    async getCurrentUrl() {
        const builder = new ClientFunctionBuilder(() => {
            /* eslint-disable no-undef */
            return window.location.href;
            /* eslint-enable no-undef */
        }, { boundTestRun: this });
        const getLocation = builder.getFunction();
        return await getLocation();
    }
    _disconnect(err) {
        this.disconnected = true;
        if (this.currentDriverTask)
            this._rejectCurrentDriverTask(err);
        this.emit('disconnected', err);
        delete test_run_tracker_1.default.activeTestRuns[this.session.id];
    }
}
exports.default = TestRun;
// Service message handlers
const ServiceMessages = TestRun.prototype;
// NOTE: this function is time-critical and must return ASAP to avoid client disconnection
ServiceMessages[client_messages_1.default.ready] = function (msg) {
    this.debugLog.driverMessage(msg);
    this.emit('connected');
    this._clearPendingRequest();
    // NOTE: the driver sends the status for the second time if it didn't get a response at the
    // first try. This is possible when the page was unloaded after the driver sent the status.
    if (msg.status.id === this.lastDriverStatusId)
        return this.lastDriverStatusResponse;
    this.lastDriverStatusId = msg.status.id;
    this.lastDriverStatusResponse = this._handleDriverRequest(msg.status);
    if (this.lastDriverStatusResponse)
        return this.lastDriverStatusResponse;
    // NOTE: we send an empty response after the MAX_RESPONSE_DELAY timeout is exceeded to keep connection
    // with the client and prevent the response timeout exception on the client side
    const responseTimeout = setTimeout(() => this._resolvePendingRequest(null), MAX_RESPONSE_DELAY);
    return new Promise((resolve, reject) => {
        this.pendingRequest = { resolve, reject, responseTimeout };
    });
};
ServiceMessages[client_messages_1.default.readyForBrowserManipulation] = async function (msg) {
    this.debugLog.driverMessage(msg);
    let result = null;
    let error = null;
    try {
        result = await this.browserManipulationQueue.executePendingManipulation(msg);
    }
    catch (err) {
        error = err;
    }
    return { result, error };
};
ServiceMessages[client_messages_1.default.waitForFileDownload] = function (msg) {
    this.debugLog.driverMessage(msg);
    return new Promise(resolve => {
        if (this.fileDownloadingHandled) {
            this.fileDownloadingHandled = false;
            resolve(true);
        }
        else
            this.resolveWaitForFileDownloadingPromise = resolve;
    });
};
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,