"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const dedent_1 = __importDefault(require("dedent"));
const lodash_1 = require("lodash");
const phase_1 = __importDefault(require("../../test-run/phase"));
const types_1 = require("../types");
const SUBTITLES = {
    [phase_1.default.initial]: '',
    [phase_1.default.inFixtureBeforeHook]: '<span class="subtitle">Error in fixture.before hook</span>\n',
    [phase_1.default.inFixtureBeforeEachHook]: '<span class="subtitle">Error in fixture.beforeEach hook</span>\n',
    [phase_1.default.inTestBeforeHook]: '<span class="subtitle">Error in test.before hook</span>\n',
    [phase_1.default.inTest]: '',
    [phase_1.default.inTestAfterHook]: '<span class="subtitle">Error in test.after hook</span>\n',
    [phase_1.default.inFixtureAfterEachHook]: '<span class="subtitle">Error in fixture.afterEach hook</span>\n',
    [phase_1.default.inFixtureAfterHook]: '<span class="subtitle">Error in fixture.after hook</span>\n',
    [phase_1.default.inRoleInitializer]: '<span class="subtitle">Error in Role initializer</span>\n',
    [phase_1.default.inBookmarkRestore]: '<span class="subtitle">Error while restoring configuration after Role switch</span>\n'
};
function renderForbiddenCharsList(forbiddenCharsList) {
    return forbiddenCharsList.map(charInfo => `\t"${charInfo.chars}" at index ${charInfo.index}\n`).join('');
}
exports.renderForbiddenCharsList = renderForbiddenCharsList;
function formatUrl(url) {
    return `<a href="${url}">${url}</a>`;
}
exports.formatUrl = formatUrl;
function formatSelectorCallstack(apiFnChain, apiFnIndex, viewportWidth) {
    if (typeof apiFnIndex === 'undefined')
        return '';
    const emptySpaces = 10;
    const ellipsis = '...)';
    const availableWidth = viewportWidth - emptySpaces;
    return apiFnChain.map((apiFn, index) => {
        let formattedApiFn = String.fromCharCode(160);
        formattedApiFn += index === apiFnIndex ? '>' : ' ';
        formattedApiFn += ' | ';
        formattedApiFn += index !== 0 ? '  ' : '';
        formattedApiFn += apiFn;
        if (formattedApiFn.length > availableWidth)
            return formattedApiFn.substr(0, availableWidth - emptySpaces) + ellipsis;
        return formattedApiFn;
    }).join('\n');
}
exports.formatSelectorCallstack = formatSelectorCallstack;
function formatExpressionMessage(expression, line, column) {
    const expressionStr = lodash_1.escape(expression);
    if (line === void 0 || column === void 0)
        return expressionStr;
    return `${expressionStr}\nat ${line}:${column}`;
}
exports.formatExpressionMessage = formatExpressionMessage;
function replaceLeadingSpacesWithNbsp(str) {
    return str.replace(/^ +/mg, match => {
        return lodash_1.repeat('&nbsp;', match.length);
    });
}
exports.replaceLeadingSpacesWithNbsp = replaceLeadingSpacesWithNbsp;
function shouldSkipCallsite(err) {
    return err.code === types_1.TEST_RUN_ERRORS.uncaughtNonErrorObjectInTestCode ||
        err.code === types_1.TEST_RUN_ERRORS.unhandledPromiseRejection ||
        err.code === types_1.TEST_RUN_ERRORS.uncaughtException;
}
exports.shouldSkipCallsite = shouldSkipCallsite;
function markup(err, msgMarkup, errCallsite = '') {
    msgMarkup = dedent_1.default(`${SUBTITLES[err.testRunPhase]}<div class="message">${dedent_1.default(msgMarkup)}</div>`);
    const browserStr = `\n\n<strong>Browser:</strong> <span class="user-agent">${err.userAgent}</span>`;
    if (errCallsite)
        msgMarkup += `${browserStr}\n\n${errCallsite}\n`;
    else
        msgMarkup += browserStr;
    if (err.screenshotPath)
        msgMarkup += `\n<div class="screenshot-info"><strong>Screenshot:</strong> <a class="screenshot-path">${lodash_1.escape(err.screenshotPath)}</a></div>`;
    if (!shouldSkipCallsite(err)) {
        const callsiteMarkup = err.getCallsiteMarkup();
        if (callsiteMarkup)
            msgMarkup += `\n\n${callsiteMarkup}`;
    }
    return msgMarkup.replace('\t', '&nbsp;'.repeat(4));
}
exports.markup = markup;
//# sourceMappingURL=data:application/json;base64,