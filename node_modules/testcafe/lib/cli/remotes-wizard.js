"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const qrcode_terminal_1 = __importDefault(require("qrcode-terminal"));
const chalk_1 = __importDefault(require("chalk"));
const log_1 = __importDefault(require("./log"));
const promisify_event_1 = __importDefault(require("promisify-event"));
const dedent_1 = __importDefault(require("dedent"));
async function default_1(testCafe, remoteCount, showQRCode) {
    const connectionPromises = [];
    if (remoteCount) {
        log_1.default.hideSpinner();
        const description = dedent_1.default(`
            Connecting ${remoteCount} remote browser(s)...
            Navigate to the following URL from each remote browser.
        `);
        log_1.default.write(description);
        if (showQRCode)
            log_1.default.write('You can either enter the URL or scan the QR-code.');
        const connectionUrl = testCafe.browserConnectionGateway.connectUrl;
        log_1.default.write(`Connect URL: ${chalk_1.default.underline.blue(connectionUrl)}`);
        if (showQRCode)
            qrcode_terminal_1.default.generate(connectionUrl);
        for (let i = 0; i < remoteCount; i++) {
            connectionPromises.push(testCafe
                .createBrowserConnection()
                .then((bc) => promisify_event_1.default(bc, 'ready').then(() => bc))
                .then((bc) => {
                log_1.default.write(`${chalk_1.default.green('CONNECTED')} ${bc.userAgent}`);
                return bc;
            }));
        }
        log_1.default.showSpinner();
    }
    return await Promise.all(connectionPromises);
}
exports.default = default_1;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVtb3Rlcy13aXphcmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY2xpL3JlbW90ZXMtd2l6YXJkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsc0VBQXFDO0FBQ3JDLGtEQUEwQjtBQUMxQixnREFBd0I7QUFDeEIsc0VBQTZDO0FBQzdDLG9EQUE0QjtBQUdiLEtBQUssb0JBQVcsUUFBYSxFQUFFLFdBQW1CLEVBQUUsVUFBbUI7SUFDbEYsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUM7SUFFOUIsSUFBSSxXQUFXLEVBQUU7UUFDYixhQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7UUFFbEIsTUFBTSxXQUFXLEdBQUcsZ0JBQU0sQ0FBQzt5QkFDVixXQUFXOztTQUUzQixDQUFDLENBQUM7UUFFSCxhQUFHLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBRXZCLElBQUksVUFBVTtZQUNWLGFBQUcsQ0FBQyxLQUFLLENBQUMsbURBQW1ELENBQUMsQ0FBQztRQUVuRSxNQUFNLGFBQWEsR0FBRyxRQUFRLENBQUMsd0JBQXdCLENBQUMsVUFBVSxDQUFDO1FBRW5FLGFBQUcsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLGVBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUVqRSxJQUFJLFVBQVU7WUFDVix5QkFBTSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUVuQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsV0FBVyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ2xDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxRQUFRO2lCQUMzQix1QkFBdUIsRUFBRTtpQkFDekIsSUFBSSxDQUFDLENBQUMsRUFBcUIsRUFBRSxFQUFFLENBQUMseUJBQWMsQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2lCQUMzRSxJQUFJLENBQUMsQ0FBQyxFQUFxQixFQUFFLEVBQUU7Z0JBQzVCLGFBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxlQUFLLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO2dCQUV6RCxPQUFPLEVBQUUsQ0FBQztZQUNkLENBQUMsQ0FBQyxDQUNMLENBQUM7U0FDTDtRQUVELGFBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztLQUNyQjtJQUVELE9BQU8sTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFDakQsQ0FBQztBQXZDRCw0QkF1Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcXJjb2RlIGZyb20gJ3FyY29kZS10ZXJtaW5hbCc7XG5pbXBvcnQgY2hhbGsgZnJvbSAnY2hhbGsnO1xuaW1wb3J0IGxvZyBmcm9tICcuL2xvZyc7XG5pbXBvcnQgcHJvbWlzaWZ5RXZlbnQgZnJvbSAncHJvbWlzaWZ5LWV2ZW50JztcbmltcG9ydCBkZWRlbnQgZnJvbSAnZGVkZW50JztcbmltcG9ydCBCcm93c2VyQ29ubmVjdGlvbiBmcm9tICcuLi9icm93c2VyL2Nvbm5lY3Rpb24nO1xuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiAodGVzdENhZmU6IGFueSwgcmVtb3RlQ291bnQ6IG51bWJlciwgc2hvd1FSQ29kZTogYm9vbGVhbik6IFByb21pc2U8QnJvd3NlckNvbm5lY3Rpb25bXT4ge1xuICAgIGNvbnN0IGNvbm5lY3Rpb25Qcm9taXNlcyA9IFtdO1xuXG4gICAgaWYgKHJlbW90ZUNvdW50KSB7XG4gICAgICAgIGxvZy5oaWRlU3Bpbm5lcigpO1xuXG4gICAgICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gZGVkZW50KGBcbiAgICAgICAgICAgIENvbm5lY3RpbmcgJHtyZW1vdGVDb3VudH0gcmVtb3RlIGJyb3dzZXIocykuLi5cbiAgICAgICAgICAgIE5hdmlnYXRlIHRvIHRoZSBmb2xsb3dpbmcgVVJMIGZyb20gZWFjaCByZW1vdGUgYnJvd3Nlci5cbiAgICAgICAgYCk7XG5cbiAgICAgICAgbG9nLndyaXRlKGRlc2NyaXB0aW9uKTtcblxuICAgICAgICBpZiAoc2hvd1FSQ29kZSlcbiAgICAgICAgICAgIGxvZy53cml0ZSgnWW91IGNhbiBlaXRoZXIgZW50ZXIgdGhlIFVSTCBvciBzY2FuIHRoZSBRUi1jb2RlLicpO1xuXG4gICAgICAgIGNvbnN0IGNvbm5lY3Rpb25VcmwgPSB0ZXN0Q2FmZS5icm93c2VyQ29ubmVjdGlvbkdhdGV3YXkuY29ubmVjdFVybDtcblxuICAgICAgICBsb2cud3JpdGUoYENvbm5lY3QgVVJMOiAke2NoYWxrLnVuZGVybGluZS5ibHVlKGNvbm5lY3Rpb25VcmwpfWApO1xuXG4gICAgICAgIGlmIChzaG93UVJDb2RlKVxuICAgICAgICAgICAgcXJjb2RlLmdlbmVyYXRlKGNvbm5lY3Rpb25VcmwpO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVtb3RlQ291bnQ7IGkrKykge1xuICAgICAgICAgICAgY29ubmVjdGlvblByb21pc2VzLnB1c2godGVzdENhZmVcbiAgICAgICAgICAgICAgICAuY3JlYXRlQnJvd3NlckNvbm5lY3Rpb24oKVxuICAgICAgICAgICAgICAgIC50aGVuKChiYzogQnJvd3NlckNvbm5lY3Rpb24pID0+IHByb21pc2lmeUV2ZW50KGJjLCAncmVhZHknKS50aGVuKCgpID0+IGJjKSlcbiAgICAgICAgICAgICAgICAudGhlbigoYmM6IEJyb3dzZXJDb25uZWN0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxvZy53cml0ZShgJHtjaGFsay5ncmVlbignQ09OTkVDVEVEJyl9ICR7YmMudXNlckFnZW50fWApO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBiYztcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxvZy5zaG93U3Bpbm5lcigpO1xuICAgIH1cblxuICAgIHJldHVybiBhd2FpdCBQcm9taXNlLmFsbChjb25uZWN0aW9uUHJvbWlzZXMpO1xufVxuIl19